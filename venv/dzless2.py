#EASY
# Задача-1:
# Дан список фруктов.
# Напишите программу, выводящую фрукты в виде нумерованного списка,
# выровненного по правой стороне.

# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2.  банан
# 3.   киви
# 4.  арбуз

# Подсказка: воспользоваться методом .format()

# frykti = ['яблоко', 'банан', 'киви', 'арбуз']
# x = 0
# while x < len(frykti):
#     print(x + 1, frykti[x])
#     x = x + 1

# вариант 2

# right_offset = len(max(frykti, key = len)) #
# for index, item in enumerate(frykti,  start = 1): # start = x начинает считать с x сивола
#     print('{}. {}'.format(index, item.rjust(right_offset)))

# Задача-2:
# Даны два произвольные списка.
# Удалите из первого списка элементы, присутствующие во втором списке.

# firstlist = {1, 2, 3, 4, 5, 1, 2}
# secondlist = {1, 6, 7, 3, 2}
# print(firstlist - (firstlist & secondlist))

# 2 способ из гдз
# for a in secondlist:
#     while a in firstlist:
#         firstlist.remove(a)
#
# print(firstlist)

# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, если не кратен, то умножить на два.

# spisok_list = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# new_list = {}
# x = 0
# while x < len(spisok_list):
#     value = spisok_list[x]
#     if value % 2 == 0:
#         value = (value / 4)
#         new_list[x] = value
#         x = x + 1
#     else:
#         value = (value * 2)
#         new_list[x] = value
#         x = x + 1
#
# print(new_list)

# 2 способ из гдз

# spisok_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(spisok_list)
# new_list = []
#
# for value in spisok_list:
#     if value % 2 == 0:
#         new_list.append(value / 4)
#     else:
#         new_list.append(value * 2)
#
# print(new_list)


# NORMAL
# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]

# what = [0, 1, 4, 2, 7, 9, -4]
# new_list = {}
# x = 0
# while x < len(what):
#     value = what[x]
#     value = value ** 0.5
#     if type(value) == complex:
#         x = x + 1
#     elif type(value) == float:
#         new_list[x] = int(value)
#         x = x + 1
# print(new_list)

# 2 способ из гдз

# import math
#
# what = [0, 1, 4, 2, 7, 9, -4]
# new_list = []
#
# for value in what:
#     if value >= 0:
#         #вариант 1
#         root_num = math.sqrt(value)
#         #вариант 2 без imoport math
#         root_num = value ** 0.5
#
#         if root_num == int(root_num): # 2.0 == 2
#             new_list.append(int(root_num))
# print(new_list)


# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

# day = int(input('День: '))
# mounth = int(input('Месяц: '))
# year = input('Год: ')
# days = ['первое', 'второе', 'третье', 'четвертое', 'пятое', 'шестое', 'седьмое', 'восьмое', 'девятое', 'десятоe',
#         'одиннадцатое', 'двенадцатое', 'тринадцатое', 'четырнадцатое', 'пятнадцатое', 'шестнадцатое', 'семнадцатое',
#         'восемнадцатое', 'девятнадцатое', 'двадцатое', 'двадцать первое', 'двадцать второе', 'двадцать третье',
#         'двадцать четвертое', 'двадцать пятое', 'двадцать шестое', 'двадцать седьмое', 'двадцать восьмое',
#         'двадцать девятое', 'тридцатое', 'тридцать первое']
# mounthes = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября',
#             'декабря']
# x = day
# y = mounth
# y = y - 1
# x = x - 1
# # print(days[x])
# # print(mounthes[y])
# # result = f'days[x] mounthes[y] year год'
# print(days[x], mounthes[y], year, 'года')

#2 способ из гдз

# days = ['', 'первое', 'второе', 'третье', 'четвертое', 'пятое', 'шестое', 'седьмое', 'восьмое', 'девятое', 'десятоe',
#         'одиннадцатое', 'двенадцатое', 'тринадцатое', 'четырнадцатое', 'пятнадцатое', 'шестнадцатое', 'семнадцатое',
#         'восемнадцатое', 'девятнадцатое', 'двадцатое', 'двадцать первое', 'двадцать второе', 'двадцать третье',
#         'двадцать четвертое', 'двадцать пятое', 'двадцать шестое', 'двадцать седьмое', 'двадцать восьмое',
#         'двадцать девятое', 'тридцатое', 'тридцать первое']
# mounthes = ['', 'января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября',
#             'декабря']
#
# date = '02.11.2013'
# day, mounth, year = date.split('.') # Получаем дату от пользователя и сразу разбиваем по
# day = int(day) # приводим к типу int
# mounth = int(mounth)
# year = int(year)
#
# print(days[day], mounthes[mounth], year, 'года')

# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random

# test_text = input("Введите чилсло: ")
# print(type(test_text))
# test_number = int(test_text)
# print(type(test_number))
# print("Введеное число: ", test_number)

# test_number = int(input('Введите число: '))
# print(type(test_number))

# n = int(input('Введите n: '))
# list = {}
# x = 0
# while x < n:
#     import random
#     value = random.randint(-100, 100)
#     list[x] = value
#     x = x + 1
# print(list)

#2 вариант решения от гдз

# import random
# rand_list = []
# elem_count = int(input('Введите количество элементов:'))
# for _ in range(elem_count):
#     rand_list.append(random.randint(-100, 100))
# print(rand_list)

# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут:
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

# a = [1, 2, 4, 5, 6, 2, 5, 2]
# print(set(a)) # неповторяющиеся элементы исходного списка
#
# b = list() # [] элементы исходного списка, которые не имеют повторений
# for elem in a:
#     if a.count(elem) == 1:
#         b.append(elem)
# print(b)



# HARD LEVEL

# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
x = 2.5
# вычислите и выведите y
split_result = equation.split()
number_with_x = float(split_result[2].replace('x', '')) * x
y = number_with_x + float(split_result[4])
print(y)

# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
# date = '01.11.1985'
#
# # Примеры некорректных дат
# date = '01.22.1001'
# date = '1.12.1001'
# date = '-2.10.3001'

###

# days_count_by_mounth = (0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
# date = input('Введите дату:')
# day, mounth, year = date.split('.')
#
# if len(day) == 2 and len(mounth) == 2 and len(year) == 4:
#     if 0 < int(mounth) <= 12 \
#              and 0 < int(year) <= 9999 \
#              and 0 < int(day) <= days_count_by_mounth[int(mounth)]:
#         print('Дата корректна')
#     else:
#         print('Дата некорректна')
# else:
#     print('Длина одной из частей даты некорректна')

# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

# room_for_search = int(input('Номер искомой комнаты: '))
#
# block = 1
# first_room = 1
# stage = 1
#
# while room_for_search >= first_room + block ** 2:
#     first_room = first_room + block ** 2
#     stage += block
#     block += 1
#
# stage += ((room_for_search - first_room) // block)
# room_sequence = int((room_for_search - first_room) % block + 1)
#
# print(stage, room_sequence)
